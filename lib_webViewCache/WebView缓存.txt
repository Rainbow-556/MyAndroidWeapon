背景：
1、WebView默认缓存大小有限，且时效段

可参考：
1、VasSonic
2、CacheWebView


要支持的功能：
1、预下载资源包、更新(写脚本抓取要缓存到客户端的url，把该页面所有资源下载下来(Jsoup)，压缩，上传，App再去下载解压？)
    java代码抓取url网页的html，貌似只能解析出js、css，因为web端打包方式是把页面html用业务js来实现
2、资源包中没有的资源，走WebView自己的加载，对指定类型的文件自动缓存，不缓存html、json
3、和App的Glide共用图片缓存
	File file = Glide.with(context)
        .load(url)
        .downloadOnly(width, height)
		.submit()
        .get();
4、下载文件工具类，默认HttpUrlConnection，定义一套接口
5、DiskLruCache
6、资源包解压后，url和本地文件如何映射？

新方案：
1、解析要缓存的url的html中的js和css，并进一步解析其中的图片（.png等后缀），把以上url由服务器分发到App，App预下载这些资源
HtmlUnit + Jsoup解析js动态生成的网页：
https://blog.csdn.net/dietime1943/article/details/79035779
http://htmlunit.sourceforge.net/

css parser解析css：
https://codeday.me/bug/20190320/791733.html
http://cssparser.sourceforge.net/

笔记：
WebViewClient.shouldInterceptRequest()是运行在一个单独子线程中，这里只构建WebResourceResponse，让该方法快速返回，期间异步从网络加载资源
参考：https://stackoverflow.com/questions/33370123/how-to-get-webviewclient-shouldinterceptrequest-invoked-asynchronously
https://huangxiquan.github.io/2017/02/13/webview-async-image/

interceptRequest()：该方法是单线程调用，线程为：TaskSchedulerFo
WebResourceResponse.getData():同上
LxInputStream.read()：同上

interceptRequest()执行线程：5121，5124，5117
LxInputStream.read()执行线程：5121，5124，5117
华为手机WebView加载资源可能是3个线程


把加载InputStream放到LxInputStream.read()无参数的方法中时，比放在interceptRequest()网页加载更慢，
read(@NonNull byte[] b, int off, int len)在该方法中，执行很快，减少了调用次数

